name: Test Persian Calendar

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate VBA Files
      shell: powershell
      run: |
        # Check if all required .bas files exist
        $requiredFiles = @(
          "src/PersianCalendarConstants.bas",
          "src/PersianToGregorianConverter.bas", 
          "src/GregorianToPersianConverter.bas",
          "src/PersianCalendarHelpers.bas",
          "src/PersianCalendarTests.bas"
        )
        
        $allFilesExist = $true
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Host "✓ Found: $file"
          } else {
            Write-Host "✗ Missing: $file"
            $allFilesExist = $false
          }
        }
        
        if (-not $allFilesExist) {
          Write-Error "Some required files are missing"
          exit 1
        }
    
    - name: Validate File Structure
      shell: powershell
      run: |
        # Check basic VBA syntax in files
        $basFiles = Get-ChildItem -Path "src/*.bas" -Recurse
        
        foreach ($file in $basFiles) {
          $content = Get-Content $file.FullName -Raw
          
          # Check for basic VBA structure
          if ($content -match "Option Explicit") {
            Write-Host "✓ $($file.Name): Has Option Explicit"
          } else {
            Write-Host "⚠ $($file.Name): Missing Option Explicit"
          }
          
          # Check for Public functions
          $publicFunctions = [regex]::Matches($content, "Public Function \w+")
          Write-Host "✓ $($file.Name): Found $($publicFunctions.Count) public functions"
          
          # Check for syntax errors (basic)
          if ($content -match "End Function" -and $content -match "Public Function") {
            Write-Host "✓ $($file.Name): Basic syntax check passed"
          } else {
            Write-Host "⚠ $($file.Name): Potential syntax issues"
          }
        }
    
    - name: Check Documentation
      shell: powershell
      run: |
        # Verify essential documentation exists
        $docs = @("README.md", "README.fa.md", "docs/API.md", "CONTRIBUTING.md", "LICENSE", "CHANGELOG.md")
        
        $allDocsExist = $true
        foreach ($doc in $docs) {
          if (Test-Path $doc) {
            Write-Host "✓ Documentation: $doc"
          } else {
            Write-Host "✗ Missing documentation: $doc"
            $allDocsExist = $false
          }
        }
        
        if (-not $allDocsExist) {
          Write-Error "Some documentation files are missing"
          exit 1
        }
    
    - name: Validate README Links
      shell: powershell
      run: |
        # Check if README.md has link to README.fa.md
        $readmeContent = Get-Content "README.md" -Raw
        if ($readmeContent -match "README\.fa\.md") {
          Write-Host "✓ README.md contains link to README.fa.md"
        } else {
          Write-Host "⚠ README.md missing link to README.fa.md"
        }
        
        # Check if README.fa.md has link to README.md
        $readmeFaContent = Get-Content "README.fa.md" -Raw
        if ($readmeFaContent -match "README\.md") {
          Write-Host "✓ README.fa.md contains link to README.md"
        } else {
          Write-Host "⚠ README.fa.md missing link to README.md"
        }

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Lint Markdown
      uses: DavidAnson/markdownlint-cli2-action@v11
      with:
        globs: '**/*.md'
        config: |
          {
            "MD013": false,
            "MD033": false,
            "MD041": false,
            "MD001": false
          }